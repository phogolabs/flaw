// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"sync"

	"github.com/phogolabs/flaw/format"
)

type StateFlusher struct {
	FlagStub        func(int) bool
	flagMutex       sync.RWMutex
	flagArgsForCall []struct {
		arg1 int
	}
	flagReturns struct {
		result1 bool
	}
	flagReturnsOnCall map[int]struct {
		result1 bool
	}
	FlushStub        func() error
	flushMutex       sync.RWMutex
	flushArgsForCall []struct {
	}
	flushReturns struct {
		result1 error
	}
	flushReturnsOnCall map[int]struct {
		result1 error
	}
	PrecisionStub        func() (int, bool)
	precisionMutex       sync.RWMutex
	precisionArgsForCall []struct {
	}
	precisionReturns struct {
		result1 int
		result2 bool
	}
	precisionReturnsOnCall map[int]struct {
		result1 int
		result2 bool
	}
	WidthStub        func() (int, bool)
	widthMutex       sync.RWMutex
	widthArgsForCall []struct {
	}
	widthReturns struct {
		result1 int
		result2 bool
	}
	widthReturnsOnCall map[int]struct {
		result1 int
		result2 bool
	}
	WriteStub        func([]byte) (int, error)
	writeMutex       sync.RWMutex
	writeArgsForCall []struct {
		arg1 []byte
	}
	writeReturns struct {
		result1 int
		result2 error
	}
	writeReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *StateFlusher) Flag(arg1 int) bool {
	fake.flagMutex.Lock()
	ret, specificReturn := fake.flagReturnsOnCall[len(fake.flagArgsForCall)]
	fake.flagArgsForCall = append(fake.flagArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("Flag", []interface{}{arg1})
	fake.flagMutex.Unlock()
	if fake.FlagStub != nil {
		return fake.FlagStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.flagReturns
	return fakeReturns.result1
}

func (fake *StateFlusher) FlagCallCount() int {
	fake.flagMutex.RLock()
	defer fake.flagMutex.RUnlock()
	return len(fake.flagArgsForCall)
}

func (fake *StateFlusher) FlagCalls(stub func(int) bool) {
	fake.flagMutex.Lock()
	defer fake.flagMutex.Unlock()
	fake.FlagStub = stub
}

func (fake *StateFlusher) FlagArgsForCall(i int) int {
	fake.flagMutex.RLock()
	defer fake.flagMutex.RUnlock()
	argsForCall := fake.flagArgsForCall[i]
	return argsForCall.arg1
}

func (fake *StateFlusher) FlagReturns(result1 bool) {
	fake.flagMutex.Lock()
	defer fake.flagMutex.Unlock()
	fake.FlagStub = nil
	fake.flagReturns = struct {
		result1 bool
	}{result1}
}

func (fake *StateFlusher) FlagReturnsOnCall(i int, result1 bool) {
	fake.flagMutex.Lock()
	defer fake.flagMutex.Unlock()
	fake.FlagStub = nil
	if fake.flagReturnsOnCall == nil {
		fake.flagReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.flagReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *StateFlusher) Flush() error {
	fake.flushMutex.Lock()
	ret, specificReturn := fake.flushReturnsOnCall[len(fake.flushArgsForCall)]
	fake.flushArgsForCall = append(fake.flushArgsForCall, struct {
	}{})
	fake.recordInvocation("Flush", []interface{}{})
	fake.flushMutex.Unlock()
	if fake.FlushStub != nil {
		return fake.FlushStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.flushReturns
	return fakeReturns.result1
}

func (fake *StateFlusher) FlushCallCount() int {
	fake.flushMutex.RLock()
	defer fake.flushMutex.RUnlock()
	return len(fake.flushArgsForCall)
}

func (fake *StateFlusher) FlushCalls(stub func() error) {
	fake.flushMutex.Lock()
	defer fake.flushMutex.Unlock()
	fake.FlushStub = stub
}

func (fake *StateFlusher) FlushReturns(result1 error) {
	fake.flushMutex.Lock()
	defer fake.flushMutex.Unlock()
	fake.FlushStub = nil
	fake.flushReturns = struct {
		result1 error
	}{result1}
}

func (fake *StateFlusher) FlushReturnsOnCall(i int, result1 error) {
	fake.flushMutex.Lock()
	defer fake.flushMutex.Unlock()
	fake.FlushStub = nil
	if fake.flushReturnsOnCall == nil {
		fake.flushReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.flushReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *StateFlusher) Precision() (int, bool) {
	fake.precisionMutex.Lock()
	ret, specificReturn := fake.precisionReturnsOnCall[len(fake.precisionArgsForCall)]
	fake.precisionArgsForCall = append(fake.precisionArgsForCall, struct {
	}{})
	fake.recordInvocation("Precision", []interface{}{})
	fake.precisionMutex.Unlock()
	if fake.PrecisionStub != nil {
		return fake.PrecisionStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.precisionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *StateFlusher) PrecisionCallCount() int {
	fake.precisionMutex.RLock()
	defer fake.precisionMutex.RUnlock()
	return len(fake.precisionArgsForCall)
}

func (fake *StateFlusher) PrecisionCalls(stub func() (int, bool)) {
	fake.precisionMutex.Lock()
	defer fake.precisionMutex.Unlock()
	fake.PrecisionStub = stub
}

func (fake *StateFlusher) PrecisionReturns(result1 int, result2 bool) {
	fake.precisionMutex.Lock()
	defer fake.precisionMutex.Unlock()
	fake.PrecisionStub = nil
	fake.precisionReturns = struct {
		result1 int
		result2 bool
	}{result1, result2}
}

func (fake *StateFlusher) PrecisionReturnsOnCall(i int, result1 int, result2 bool) {
	fake.precisionMutex.Lock()
	defer fake.precisionMutex.Unlock()
	fake.PrecisionStub = nil
	if fake.precisionReturnsOnCall == nil {
		fake.precisionReturnsOnCall = make(map[int]struct {
			result1 int
			result2 bool
		})
	}
	fake.precisionReturnsOnCall[i] = struct {
		result1 int
		result2 bool
	}{result1, result2}
}

func (fake *StateFlusher) Width() (int, bool) {
	fake.widthMutex.Lock()
	ret, specificReturn := fake.widthReturnsOnCall[len(fake.widthArgsForCall)]
	fake.widthArgsForCall = append(fake.widthArgsForCall, struct {
	}{})
	fake.recordInvocation("Width", []interface{}{})
	fake.widthMutex.Unlock()
	if fake.WidthStub != nil {
		return fake.WidthStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.widthReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *StateFlusher) WidthCallCount() int {
	fake.widthMutex.RLock()
	defer fake.widthMutex.RUnlock()
	return len(fake.widthArgsForCall)
}

func (fake *StateFlusher) WidthCalls(stub func() (int, bool)) {
	fake.widthMutex.Lock()
	defer fake.widthMutex.Unlock()
	fake.WidthStub = stub
}

func (fake *StateFlusher) WidthReturns(result1 int, result2 bool) {
	fake.widthMutex.Lock()
	defer fake.widthMutex.Unlock()
	fake.WidthStub = nil
	fake.widthReturns = struct {
		result1 int
		result2 bool
	}{result1, result2}
}

func (fake *StateFlusher) WidthReturnsOnCall(i int, result1 int, result2 bool) {
	fake.widthMutex.Lock()
	defer fake.widthMutex.Unlock()
	fake.WidthStub = nil
	if fake.widthReturnsOnCall == nil {
		fake.widthReturnsOnCall = make(map[int]struct {
			result1 int
			result2 bool
		})
	}
	fake.widthReturnsOnCall[i] = struct {
		result1 int
		result2 bool
	}{result1, result2}
}

func (fake *StateFlusher) Write(arg1 []byte) (int, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.writeMutex.Lock()
	ret, specificReturn := fake.writeReturnsOnCall[len(fake.writeArgsForCall)]
	fake.writeArgsForCall = append(fake.writeArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	fake.recordInvocation("Write", []interface{}{arg1Copy})
	fake.writeMutex.Unlock()
	if fake.WriteStub != nil {
		return fake.WriteStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.writeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *StateFlusher) WriteCallCount() int {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return len(fake.writeArgsForCall)
}

func (fake *StateFlusher) WriteCalls(stub func([]byte) (int, error)) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = stub
}

func (fake *StateFlusher) WriteArgsForCall(i int) []byte {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	argsForCall := fake.writeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *StateFlusher) WriteReturns(result1 int, result2 error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = nil
	fake.writeReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *StateFlusher) WriteReturnsOnCall(i int, result1 int, result2 error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = nil
	if fake.writeReturnsOnCall == nil {
		fake.writeReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.writeReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *StateFlusher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.flagMutex.RLock()
	defer fake.flagMutex.RUnlock()
	fake.flushMutex.RLock()
	defer fake.flushMutex.RUnlock()
	fake.precisionMutex.RLock()
	defer fake.precisionMutex.RUnlock()
	fake.widthMutex.RLock()
	defer fake.widthMutex.RUnlock()
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *StateFlusher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ format.StateFlusher = new(StateFlusher)
